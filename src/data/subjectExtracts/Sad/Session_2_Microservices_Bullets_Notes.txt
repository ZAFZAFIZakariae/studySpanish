# Extracted content
Source: subjects/Sad/Session_2_Microservices_Bullets_Notes.pdf

### Page 1
Microservices: Definition, Benefits, and Trade-OffsServicios y Aplicaciones Distribuidas
![Page 1, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_001.png)

### Page 2
Context
•Monolith strengths met growth limits.•Need for team autonomy and independent releases.•Microservices emerged as an organiza:onal & technical response.
![Page 2, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_002.png)
![Page 2, Figure 2](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_002_img_001.png)

### Page 3
What Is a Microservice?
•Small, independently deployable service.•Owns a narrowly scoped capability / bounded context.•Loosely coupled, highly cohesive; communicates over the network.
![Page 3, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_003.png)

### Page 4
Monolith vs Microservices
•Monolith: one deployable; fewer moving parts.•Microservices: many deployables; higher autonomy.•Trade-off: simplicity vs independent evolution.
![Page 4, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_004.png)

### Page 5
Principle: Bounded Context
•Use domain-driven design (DDD) to define boundaries.•Each service owns a coherent domain capability.•Interfaces between contexts are explicit and stable.
![Page 5, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_005.png)

### Page 6
Independent Deployability
•Each service ships on its own cadence.•Avoid shared databases and shared libraries that force lockstep.•Contracts and backward compa:bility are essen:al.
![Page 6, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_006.png)

### Page 7
Organizational Alignment
•Team structure mirrors system structure.•Service ownership maps to long-lived teams.•Cognitive load must match team capacity.
![Page 7, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_007.png)

### Page 8
Microservices vs SOA
•Smaller units, stricter autonomy than traditional SOA.•Operational culture: DevOps, CI/CD, automation.•Lightweight protocols vs heavy ESB-centric designs.
![Page 8, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_008.png)

### Page 9
Communication Styles Overview
•Synchronous: REST, gRPC; simple request/response.•Asynchronous: events, queues, streams; decoupled timing.•Hybrid patterns blend both.
![Page 9, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_009.png)

### Page 10
Synchronous Comms: REST
•Human-friendly, widely supported, cacheable over HTTP .•Great for CRUD and resource-centric APIs.•Beware mul:-hop latency and cascading failures.
![Page 10, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_010.png)

### Page 11
Synchronous Comms: gRPC
•Contract-first with protobuf; strong typing and speed.•Bi-directional streaming, efficient binary transport.•Couples clients to schemas—manage versioning carefully.
![Page 11, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_011.png)

### Page 12
Asynchrony: Messaging & Events
•Queues (task distribution) and topics (pub/sub).•Decouples producers and consumers; smooths traffic spikes.•Requires idempotency and explicit ordering choices.
![Page 12, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_012.png)

### Page 13
Data Ownership: per Service?
•Each service owns its schema and storage.•Avoid shared databases that create hidden coupling.•Integrate via APIs/events, not cross-service SQL.
![Page 13, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_013.png)

### Page 14
Consistency & CQRS Basics
•Accept eventual consistency between services.•CQRS separates writes (commands) and reads (queries).•Projec:ons/read models serve low-latency queries.
![Page 14, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_014.png)

### Page 15
Sagas & Distributed Transactions
•Long-lived workflows coordinated via messages.•Compensating actions instead of global 2-phase commit.•Orchestration vs choreography styles.
![Page 15, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_015.png)

### Page 16
API Gateways
•Single entry point for external clients.•Cross-cutting concerns: authN/Z, rate limiting, TLS.•Request shaping: routing, aggregation, protocol translation.
![Page 16, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_016.png)

### Page 17
Service Discovery
•Dynamic environments require discovery.•Registries or DNS + health checks.•Config and secrets management are foundational.
![Page 17, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_017.png)

### Page 18
Observability in Microservices
•Three pillars: logs, metrics, traces.•Correlate requests across services (trace IDs).•SLOs and error budgets guide priori:es.
![Page 18, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_018.png)

### Page 19
Testing Strategies
•Contract tests to protect APIs between teams.•Pyramid: unit ≫ component/integration ≫ end-to-end.•Test data and environments must be automatable.
![Page 19, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_019.png)

### Page 20
CI/CD per Service
•Pipeline per service with clear promotion stages.•Canary and blue-green deployments reduce risk.•Automate rollbacks; keep artifacts immutable.
![Page 20, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_020.png)

### Page 21
Security Fundamentals
•Zero-trust: authenticate and authorize every request.•mTLS for service-to-service encryption.•Secret management and least privilege.
![Page 21, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_021.png)

### Page 22
Service Mesh (Brief Overview)
•Oﬄoad retries, :meouts, and mTLS.•Uniform telemetry and policy enforcement.•Beware added complexity—adopt when ready.
![Page 22, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_022.png)

### Page 23
Containers & Orchestration
•Containers package runtime; orchestration manages fleet.•Kubernetes: scheduling, scaling, self-healing.•Declarative manifests and controllers.
![Page 23, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_023.png)

### Page 24
Platform
•Platform team provides paved roads (golden paths).•Templates, scaffolding, and guardrails reduce toil.•Self-service + sensible defaults speed teams.
![Page 24, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_024.png)

### Page 25
Costs & Trade-Offs
•Operational overhead: more services, more things to run.•Latency and partial failures are everyday realities.•People costs: skills, on-call, coordination.
![Page 25, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_025.png)

### Page 26
Common Anti-Patterns
•Nanoservices: spli^ng too far, cha_y networks.•Shared database across 'services' (hidden coupling).•Logic in the gateway/ESB recrea:ng a central bo_leneck.
![Page 26, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_026.png)

### Page 27
When NOT to Use Microservices
•Small team, simple domain, low scale.•Unclear boundaries or volatile requirements.•Lack of platform/observability maturity.
![Page 27, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_027.png)

### Page 28
Migration Strategies: Strangler
•Wrap the monolith; route new capabilities to services.•Gradually replace parts behind stable interfaces.•Continuously measure progress and outcomes.
![Page 28, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_028.png)

### Page 29
Migration: Domain Extraction
•Identify seams via DDD context maps and change cadence.•Extract independent or painful domains first.•Establish contract and data ownership before cutover.
![Page 29, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_029.png)

### Page 30
Case Study: E-Commerce Split
•Orders, Payments, Catalog, Users, No:ﬁca:ons.•Independent scaling and release cadences.•Clear contracts and resilience pa_erns.
![Page 30, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_030.png)

### Page 31
Case Study: Lessons Learned
•Invest early in observability and platform tooling.•Keep boundaries aligned to business outcomes.•Resist premature decomposition and tech sprawl.
![Page 31, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_031.png)

### Page 32
Discussion Prompts
•Which domains in your system change most frequently?•Where are teams blocked by centralized releases?•What platform gaps would slow a microservices migration?
![Page 32, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_032.png)

### Page 33
Key Takeaways
•Microservices trade simplicity for autonomy and speed.•Bounded contexts and independent deployability are non-negotiable.•Success requires platform maturity and discipline.
![Page 33, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_033.png)

### Page 34
Closing & Next Session
•Preview: Communica:on deep-dive (sync vs async).•Hands-on lab setup reminder.•Q&A and reading list.
![Page 34, Figure 1](subjects/Sad/Session_2_Microservices_Bullets_Notes-images/Session_2_Microservices_Bullets_Notes_page_034.png)
