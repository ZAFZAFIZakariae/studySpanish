# Sesión 2 · Microservicios: definición y compromisos

## Objetivos
- Comprender qué es un microservicio y cómo se diferencia de un monolito o de SOA tradicional.
- Identificar beneficios, costes y anti-patrones frecuentes.
- Revisar patrones de comunicación, datos y plataforma necesarios para operar microservicios.

## Fundamentos
- **Microservicio:** unidad pequeña, desplegable de forma independiente, alineada con un contexto acotado.
- Se apoya en principios de **DDD** para definir límites claros y contratos estables.
- La autonomía requiere evitar bases de datos compartidas y minimizar dependencias en librerías comunes.

![Elementos esenciales de un microservicio](figure:sad-session-2/elementos)
Caption: Interacción entre dominio, equipo responsable, contrato API y plataforma operativa.

## Alineación organizativa
- Los equipos se organizan alrededor de dominios de negocio.
- Cadencia de despliegue independiente con pipelines propios y artefactos inmutables.
- Se necesita gestionar la **carga cognitiva**: el tamaño del servicio debe corresponder con la capacidad del equipo.

## Comunicación entre servicios
- **Sincrónica:** REST y gRPC simplifican modelos request/response pero introducen latencia y cascadas de fallos.
- **Asincrónica:** colas, eventos y streams desacoplan temporalmente productores y consumidores; requieren idempotencia y políticas de orden.
- En la práctica se combinan ambos estilos según la necesidad de consistencia y acoplamiento.

## Gestión de datos y consistencia
- Cada servicio posee su propio almacenamiento y expone datos mediante APIs o eventos.
- Se acepta la **consistencia eventual**; patrones como **CQRS** y **sagas** coordinan flujos distribuidos.
- Las transacciones globales 2PC se sustituyen por acciones compensatorias y coordinación basada en mensajes.

## Plataforma y observabilidad
- Componentes comunes: gateway/API management, descubrimiento de servicios, configuración y secretos.
- Observabilidad basada en logs, métricas y trazas con identificadores correlacionados.
- CI/CD por servicio, despliegues canary o blue/green y automatización de rollback.

## Seguridad
- Enfoque zero-trust: autenticación y autorización en cada petición, uso de mTLS y gestión de secretos.
- Los service mesh pueden delegar políticas de red, telemetría y reintentos, con coste adicional de complejidad.

## Costes y anti-patrones
- Mayores esfuerzos operativos, latencia de red, dependencia de habilidades especializadas.
- Anti-patrones comunes: nanoservicios, bases de datos compartidas, lógica centralizada en gateways.
- Evitar la adopción cuando el dominio es pequeño, los límites son inestables o la plataforma carece de madurez.

## Estrategias de migración
- **Strangler pattern:** envolver el monolito y redirigir capacidades nuevas o refactorizadas hacia servicios.
- **Extracción por dominios:** identificar seams, priorizar áreas con mayor dolor y establecer contratos antes del corte.
- Aprendizajes recurrentes: invertir temprano en observabilidad y mantener los límites alineados con resultados de negocio.
