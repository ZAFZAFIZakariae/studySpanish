# Session 1 · From monoliths to distributed systems (De monolitos a sistemas distribuidos)

## Objectives (Objetivos)
- Recognize the strengths and limits of monolithic applications (aplicaciones monolíticas).
- Spot the signals that push teams toward distributed architectures (arquitecturas distribuidas).
- Introduce the key properties of distributed systems (sistemas distribuidos).

## Monoliths in context (Monolitos en contexto)
- Single application bundling the UI, business logic, and data access (interfaz, lógica de negocio y acceso a datos).
- “All-or-nothing” deployment; simple pipelines with one artifact.
- Early advantages: speed, operational simplicity, fast onboarding.
- Growth risks: fuzzy boundaries, slow builds, frequent regressions.

## Modular monoliths (Monolitos modulares)
- Separate internal responsibilities through clearly defined modules.
- Keep a single deployment while easing future extractions.
- Stress signals: integration conflicts, coordination bottlenecks, operational risk.

## When do they still fit? (¿Cuándo siguen siendo válidos?)
- Small teams, limited-scope products, or low-criticality workloads.
- Internal tools and temporary prototypes.

## Motivations to distribute (Motivaciones para distribuir)
- The need to scale specific domains (escalar dominios específicos).
- Requirements for independent releases (releases independientes).
- Reduce the blast radius of failures and shorten deployment windows.

![Transition from monolith to services (Transición de monolito a servicios)](figure:sad-session-1/transicion)
Caption: How a monolith evolves into decoupled domains with dedicated services.

## Distributed systems defined (Sistemas distribuidos: definición)
- A set of connected computers that offer a unified view to the user.
- Key properties:
  - **Concurrency and parallelism (Concurrencia y paralelismo)** to raise throughput.
  - **Fault tolerance (Tolerancia a fallos)** via replication and controlled degradation.
  - **Scalability (Escalabilidad)** both vertical and horizontal.
  - **Transparency (Transparencia):** distribution is invisible to the user.

## Distribution costs (Costes de la distribución)
- Network latency and serialization overhead—the “network tax.”
- Eventual consistency and conflicts between replicas (consistencia eventual y conflictos).
- Expanded security surface: authentication, authorization, secret management.
- Operational complexity: observability, mature CI/CD, automation.

## Migration drivers (Impulsores de la migración)
- Selectively scale domains such as payments or orders.
- Enable independent deployments aligned with teams and business boundaries.
- Improve resilience by decoupling responsibilities.

## Migration route (Ruta de migración)
1. Modularize the monolith and spot seams (modularizar y detectar “seams”).
2. Extract autonomous domains, prioritizing the most troublesome ones.
3. Establish a shared platform: gateway, service discovery, observability.
4. Strengthen operational discipline—tests, automation, monitoring.

## Conclusions (Conclusiones)
- Monoliths deliver initial value but need oversight when fatigue signals appear.
- Distributed systems unlock agility and scale yet introduce technical and organizational challenges.
- Architectural decisions are economic bets: we accept costs to unlock specific benefits.
