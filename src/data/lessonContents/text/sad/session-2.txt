# Session 2 · Microservices: definition and trade-offs (Microservicios: definición y compromisos)

## Objectives (Objetivos)
- Understand what a microservice (microservicio) is and how it differs from a monolith or traditional SOA.
- Identify benefits, costs, and common anti-patterns (anti-patrones).
- Review communication, data, and platform patterns required to run microservices effectively.

## Fundamentals (Fundamentos)
- A **microservice (microservicio)** is a small, independently deployable unit aligned with a bounded context (contexto acotado).
- Builds on **DDD (Domain-Driven Design / Diseño guiado por el dominio)** principles to define clear boundaries and stable contracts.
- Autonomy means avoiding shared databases and minimizing dependencies on common libraries.

![Essential elements of a microservice (Elementos esenciales de un microservicio)](figure:sad-session-2/elementos)
Caption: Domain, owning team, API contract, and operating platform work together.

## Organizational alignment (Alineación organizativa)
- Teams organize around business domains (dominios de negocio).
- Independent deployment cadence with dedicated pipelines and immutable artifacts.
- Manage **cognitive load (carga cognitiva):** service size must match team capacity.

## Service-to-service communication (Comunicación entre servicios)
- **Synchronous (Sincrónica):** REST and gRPC simplify request/response models but add latency and failure cascades.
- **Asynchronous (Asincrónica):** queues, events, and streams decouple producers and consumers over time; they demand idempotency and ordering policies (políticas de orden).
- In practice both styles are combined based on consistency needs and coupling tolerance.

## Data management and consistency (Gestión de datos y consistencia)
- Each service owns its storage and exposes data through APIs or events.
- **Eventual consistency (Consistencia eventual)** is accepted; patterns such as **CQRS** and **sagas** coordinate distributed flows.
- Global 2PC transactions are replaced by compensating actions and message-driven coordination.

## Platform and observability (Plataforma y observabilidad)
- Common components: API gateway/management, service discovery, configuration, and secrets.
- Observability relies on logs, metrics, and traces with correlated identifiers.
- Service-level CI/CD, canary or blue/green deployments, and automated rollbacks.

## Security (Seguridad)
- Zero-trust posture: authenticate and authorize every request, use mTLS, manage secrets carefully.
- Service meshes can offload network policies, telemetry, and retries at the price of extra complexity.

## Costs and anti-patterns (Costes y anti-patrones)
- Higher operational effort, network latency, and reliance on specialized skills.
- Frequent anti-patterns: nanoservices, shared databases, centralizing logic in gateways.
- Avoid adoption when the domain is small, boundaries are unstable, or the platform lacks maturity.

## Migration strategies (Estrategias de migración)
- **Strangler pattern (Patrón strangler):** wrap the monolith and route new or refactored capabilities to services.
- **Domain extraction (Extracción por dominios):** identify seams, prioritize painful areas, and settle contracts before cutting over.
- Lessons learned: invest early in observability and keep boundaries aligned with business outcomes.
