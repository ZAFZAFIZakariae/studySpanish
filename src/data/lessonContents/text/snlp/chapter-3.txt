# Capítulo 3 · Desarrollo de modelos DNN con Keras

## ¿Qué es Keras?
- API de alto nivel para construir redes neuronales sobre TensorFlow.
- Enfocada en la experimentación rápida con una interfaz modular y extensible.
- Incluye implementaciones de capas, funciones de activación, pérdidas y optimizadores.

## Flujo básico de trabajo
1. Importar `tensorflow.keras` y crear un modelo secuencial.
2. Definir capas densas, convolucionales o recurrentes con sus activaciones.
3. Configurar el optimizador, función de pérdida y métricas mediante `compile`.
4. Entrenar con `fit`, monitorizando métricas y validación.
5. Evaluar e inferir con `evaluate`/`predict` y analizar resultados.

![Pipeline en Keras](figure:snlp-chapter-3/keras-pipeline)
Caption: Pasos principales desde la definición del modelo hasta la evaluación e inferencia.

## Construcción de un MLP
- `Sequential` permite apilar capas densas (`Dense`).
- La primera capa debe declarar `input_shape`; la última coincide con el número de clases.
- Activaciones frecuentes: ReLU en capas ocultas, Softmax para clasificación multiclase, Sigmoid para binaria.
- Se pueden combinar capas densas con dropout, batch norm y otras utilidades.

## Configuración del entrenamiento
- Optimización típica: `Adam` con tasa de aprendizaje ajustable.
- Pérdida `categorical_crossentropy` para etiquetas one-hot; `sparse_categorical_crossentropy` para enteros.
- Parámetros clave: tamaño de lote, número de épocas, `callbacks` (EarlyStopping, ModelCheckpoint).

## Evaluación e inferencia
- Tras entrenar, usar `model.predict` para obtener probabilidades o logits.
- Convertir salidas a clases con `argmax` y construir matrices de confusión (`sklearn.metrics`).
- Visualizar resultados con `seaborn.heatmap` para detectar confusiones sistemáticas.

## Buenas prácticas
- Normalizar entradas y dividir correctamente en train/val/test.
- Controlar el overfitting con regularización, dropout y early stopping.
- Guardar el historial de entrenamiento (`history.history`) para analizar curvas de aprendizaje.
- Documentar arquitectura y parámetros para reproducibilidad.
