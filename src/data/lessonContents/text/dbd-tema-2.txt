# Tema 2 · Procesamiento de transacciones e integridad

## Objetivos de aprendizaje
- Definir qué es una transacción y cómo evoluciona su estado.
- Revisar las propiedades ACID que debe garantizar un SGBD.
- Describir cómo se expresan y validan las transacciones en SQL.
- Comprender las estrategias para verificar restricciones de integridad.

## Mapa conceptual
- Concepto de transacción y operaciones básicas de SQL.
- Estados y propiedades del procesamiento de transacciones.
- Delimitación de transacciones en SQL y control de confirmaciones.
- Tipos de restricciones de integridad y su comprobación.

![Ciclo de vida de una transacción](figure:dbd-tema-2/estados)
Caption: Estados principales de una transacción y transiciones ocasionadas por commits, rollbacks y fallos.

## 1. Concepto de transacción
- Una **transacción** agrupa operaciones de lectura y escritura que deben ejecutarse como una unidad atómica.
- En SQL, la manipulación se realiza mediante `SELECT`, `INSERT`, `UPDATE` y `DELETE` sobre una o varias tablas.
- Ejemplo: alta de un departamento y reasignación de un empleado requieren cambios coordinados para mantener la integridad referencial.

## 2. Operaciones y estados
- Estados típicos: **activa**, **parcialmente confirmada**, **confirmada**, **fallida** y **abortada**.
- Las transacciones pueden finalizar con `COMMIT` (persistencia) o `ROLLBACK` (reversión).
- Los sistemas deben manejar abortos por errores lógicos, violaciones de restricción o fallos del sistema.

## 3. Propiedades ACID
- **Atomicidad:** todo o nada; se apoya en registros de log y mecanismos de undo.
- **Consistencia:** cada transacción debe llevar la BD de un estado válido a otro.
- **Aislamiento:** las transacciones concurrentes no deben interferir de forma observable.
- **Durabilidad:** una vez confirmado, el resultado permanece incluso ante fallos.

![Propiedades ACID y mecanismos de soporte](figure:dbd-tema-2/acid)
Caption: Relación entre propiedades ACID y componentes del SGBD que las aseguran.

## 4. Transacciones en SQL
- Una transacción inicia de forma implícita con la primera instrucción DML y finaliza con `COMMIT` o `ROLLBACK`.
- Es posible delimitarla explícitamente con `BEGIN TRANSACTION` / `START TRANSACTION`.
- SQL ofrece **puntos de salvaguarda** (`SAVEPOINT`) para deshacer parcialmente operaciones sin abortar toda la transacción.
- El modo de autocommit de los clientes determina si cada sentencia se confirma automáticamente.

## 5. Restricciones de integridad
- Tipos principales:
  - **Clave primaria (CP)** y **unicidad**.
  - **Claves ajenas (CAj)** para relaciones entre tablas.
  - **Restricciones de dominio y comprobaciones (`CHECK`)**.
  - Reglas de negocio avanzadas (triggers).
- Deben mantenerse tanto en operaciones individuales como en transacciones compuestas.

## 6. Estrategias de comprobación
- **Previa a la modificación (immediate):** se valida antes de escribir; evita estados inconsistentes pero puede requerir bloqueos.
- **Diferida:** se permite temporalmente la inconsistencia y se valida al confirmar; requiere registro de cambios intermedios.
- SQL permite marcar restricciones como `DEFERRABLE INITIALLY DEFERRED` para posponer su comprobación al commit.
- Las acciones sobre claves ajenas (`ON DELETE/UPDATE`) definen comportamiento (RESTRICT, CASCADE, SET NULL, SET DEFAULT).

## 7. Integridad en SQL
- Declaración de restricciones en `CREATE TABLE` o `ALTER TABLE`.
- Uso de disparadores (`CREATE TRIGGER`) para reglas personalizadas.
- Control de errores mediante manejo de excepciones en procedimientos almacenados para reaccionar ante violaciones.

## 8. Buenas prácticas
- Diseñar transacciones cortas que bloqueen la menor cantidad de filas posible.
- Documentar claramente qué restricciones son diferibles y bajo qué condiciones.
- Supervisar logs de transacciones y planificar tareas de mantenimiento (checkpoint, backups) que garanticen durabilidad.
