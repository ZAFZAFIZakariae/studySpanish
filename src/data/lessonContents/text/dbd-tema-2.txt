# Topic 2 · Transaction processing and integrity (Procesamiento de transacciones e integridad)

## Learning objectives (Objetivos de aprendizaje)
- Define what a transaction (transacción) is and how its state evolves.
- Review the ACID properties that a DBMS (SGBD) must guarantee.
- Describe how SQL expresses and validates transactions.
- Understand strategies for verifying integrity constraints (restricciones de integridad).

## Concept map (Mapa conceptual)
- Transaction concepts and core SQL operations.
- Transaction-processing states and properties.
- Delimiting transactions in SQL and controlling commits (control de confirmaciones).
- Types of integrity constraints and how to enforce them.

![Transaction lifecycle (Ciclo de vida de una transacción)](figure:dbd-tema-2/estados)
Caption: Main transaction states and transitions triggered by commits, rollbacks, and failures.

## 1. Transaction concept (Concepto de transacción)
- A **transaction (transacción)** groups read/write operations that must execute as one atomic unit.
- In SQL, manipulation happens through `SELECT`, `INSERT`, `UPDATE`, and `DELETE` across one or more tables.
- Example: creating a department and reassigning an employee require coordinated changes to preserve referential integrity (integridad referencial).

## 2. Operations and states (Operaciones y estados)
- Typical states: **active (activa)**, **partially committed (parcialmente confirmada)**, **committed (confirmada)**, **failed (fallida)**, and **aborted (abortada)**.
- Transactions end with `COMMIT` (persist results) or `ROLLBACK` (reverse them).
- Systems must handle aborts caused by logical errors, constraint violations, or system failures.

## 3. ACID properties (Propiedades ACID)
- **Atomicity (Atomicidad):** all or nothing, backed by logs and undo mechanisms.
- **Consistency (Consistencia):** each transaction moves the database from one valid state to another.
- **Isolation (Aislamiento):** concurrent transactions must not interfere in observable ways.
- **Durability (Durabilidad):** once committed, results survive failures.

![ACID properties and supporting mechanisms (Propiedades ACID y mecanismos de soporte)](figure:dbd-tema-2/acid)
Caption: How ACID properties map to DBMS components that enforce them.

### Recovery architecture (Arquitectura de recuperación)
![DBMS recovery workflow (Flujo de recuperación de un SGBD)](figure:dbd-tema-2/recuperacion)
Caption: Recovery manager interactions across buffer manager, WAL log, checkpoints, and persistent data files.

- **Buffer manager** pushes dirty pages and reports failures when a page cannot be written.
- **Recovery manager** inspects the log, generates REDO/UNDO actions, and orchestrates rollbacks.
- **Write-ahead logging (WAL)** flushes records to disk before data pages to guarantee durability.
- **Checkpoints** capture the log sequence number (LSN) and dirty page table so restart work is bounded.
- **Data files** receive forced writes when the recovery manager issues redo or checkpoint flushes.

## 4. Transactions in SQL (Transacciones en SQL)
- A transaction starts implicitly with the first DML statement and ends with `COMMIT` or `ROLLBACK`.
- You can delimit it explicitly with `BEGIN TRANSACTION` / `START TRANSACTION`.
- SQL provides **savepoints (puntos de salvaguarda / SAVEPOINT)** to partially undo operations without aborting the whole transaction.
- Client auto-commit mode decides whether each statement is committed automatically.

## 5. Integrity constraints (Restricciones de integridad)
- Main types:
  - **Primary key (Clave primaria, CP)** and **uniqueness (unicidad)**.
  - **Foreign keys (Claves ajenas, CAj)** linking tables.
  - **Domain constraints and checks (Restricciones de dominio, `CHECK`).**
  - Advanced business rules via triggers (reglas de negocio con triggers).
- They must hold for single operations and multi-statement transactions alike.

## 6. Validation strategies (Estrategias de comprobación)
- **Immediate (Previa a la modificación):** validate before writing; prevents inconsistent states but may require locks.
- **Deferred (Diferida):** allow temporary inconsistency and validate at commit; requires tracking intermediate changes.
- SQL lets you mark constraints as `DEFERRABLE INITIALLY DEFERRED` to postpone checks until commit time.
- Foreign-key actions (`ON DELETE/UPDATE`) define behavior—RESTRICT, CASCADE, SET NULL, SET DEFAULT.

## 7. Integrity in SQL (Integridad en SQL)
- Declare constraints in `CREATE TABLE` or `ALTER TABLE`.
- Use triggers (`CREATE TRIGGER`) for customized rules.
- Handle errors via exception management in stored procedures to react to violations.

## 8. Good practices (Buenas prácticas)
- Design short transactions that lock as few rows as possible.
- Document clearly which constraints are deferrable (restricciones diferibles) and under what conditions.
- Monitor transaction logs and schedule maintenance tasks—checkpoints, backups—to guarantee durability.
